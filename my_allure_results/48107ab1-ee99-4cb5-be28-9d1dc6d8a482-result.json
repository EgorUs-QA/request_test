{"name": "test_right_way", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9a5129eba4dc5559889f896c5fa20e9e\")>\n\n    def test_right_way(browser):\n        \"\"\"\n        Test case TC-4\n        \"\"\"\n        browser.get(URL)\n    \n        button_show_more = browser.find_element(by=By.ID, value='razzi-catalog-previous-ajax')\n        button_show_more.click()\n    \n        WebDriverWait(browser, timeout=10, poll_frequency=2).until(EC.text_to_be_present_in_element(\n            (By.CLASS_NAME, \"razzi-posts__found\"), \"Показано 16 из 16 товары\"))\n    \n        product = browser.find_element(by=By.CSS_SELECTOR, value=\"[class*='post-11094'] a.quick-view-button.rz-loop_button\")\n        ActionChains(browser).move_to_element(product).perform()\n        product.click()\n    \n        WebDriverWait(browser, timeout=10, poll_frequency=2).until(\n            EC.element_to_be_clickable((By.CSS_SELECTOR, '[name=\"add-to-cart\"]')))\n    \n        browser.find_element(by=By.CSS_SELECTOR, value='[name=\"add-to-cart\"]').click()\n    \n        WebDriverWait(browser, timeout=10, poll_frequency=2).until(\n            EC.visibility_of_element_located((By.XPATH, \"//div[@id='cart-modal']\")))\n    \n        browser.find_element(by=By.CSS_SELECTOR, value='[class=\"button-close active\"]').click()\n    \n        cart_is_visible = browser.find_element(\n            By.XPATH, value=\"//div[@id='cart-modal']\").value_of_css_property(\"display\")\n        assert cart_is_visible == \"block\", \"Unexpected state of cart\"\n    \n        browser.find_element(by=By.CSS_SELECTOR, value='p [class*=\"button checkout\"]').click()\n    \n        WebDriverWait(browser, timeout=10, poll_frequency=1).until(EC.url_to_be(f\"{URL}checkout/\"))\n    \n        common_helper = CommonHelper(browser)\n        common_helper.enter_input(input_id=\"billing_first_name\", data=\"Andrey\")\n        common_helper.enter_input(input_id=\"billing_last_name\", data=\"Ivanov\")\n        common_helper.enter_input(input_id=\"billing_address_1\", data=\"2-26, Sadovaya street\")\n        common_helper.enter_input(input_id=\"billing_city\", data=\"Moscow\")\n        common_helper.enter_input(input_id=\"billing_state\", data=\"Moscow\")\n        common_helper.enter_input(input_id=\"billing_postcode\", data=\"122457\")\n        common_helper.enter_input(input_id=\"billing_phone\", data=\"+79995784256\")\n        common_helper.enter_input(input_id=\"billing_email\", data=\"andrey.i@mail.ru\")\n    \n        payments_el = '//*[@id=\"payment\"] [contains(@style, \"position: static; zoom: 1;\")]'\n        WebDriverWait(browser, timeout=10, poll_frequency=1).until(\n            EC.presence_of_element_located((By.XPATH, payments_el)))\n        browser.find_element(by=By.ID, value=\"place_order\").click()\n    \n>       WebDriverWait(browser, timeout=10, poll_frequency=1).until(EC.url_contains(f\"{URL}checkout/order-received/\"))\n\ntests\\test_shop.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"9a5129eba4dc5559889f896c5fa20e9e\")>\nmethod = <function url_contains.<locals>._predicate at 0x000001F6939BBEC0>\nmessage = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nC:\\Users\\Egor\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:95: TimeoutException"}, "description": "\n    Test case TC-4\n    ", "start": 1682701806688, "stop": 1682701839378, "uuid": "29347e7e-4364-4dc8-a523-20fceff05886", "historyId": "832350b147fac251f172289a626c5cba", "testCaseId": "7b8323124234f69a8fde1e3de50f452e", "fullName": "tests.test_shop#test_right_way", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_shop"}, {"name": "host", "value": "DESKTOP-SPPTPK4"}, {"name": "thread", "value": "5888-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_shop"}]}